{{- if .nginx.prometheus.enabled -}}
lua_shared_dict prometheus_metrics {{ .nginx.prometheus.memsize }};
lua_package_path "{{ .nginx.prometheus.lua_path }}";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"},{0.000, 0.005, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.2, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 10})
  -- metric_upstream_latency = prometheus:histogram(
  --  "nginx_upstream_request_duration_seconds", "Upstream request latency", {"host"},{0.000, 0.005, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.2, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 10})
  metric_response_sizes = prometheus:histogram(
    "nginx_http_response_size_bytes", "Size of HTTP responses", {"host"},{10,100,1000,10000,100000,1000000})
  {{- if .nginx.prometheus.init_by_lua_code_lines }}
    {{- range $init_line := .nginx.prometheus.init_by_lua_code_lines -}}
  {{ $init_line }}
    {{- end -}}
  {{- end }}
';
log_by_lua '
  local host = ngx.var.host
  local request_time = ngx.now() - ngx.req.start_time()
  -- local upstream_response_time = ngx.var.upstream_response_time
  metric_requests:inc(1, {host, ngx.var.status})
  {{- if .nginx.prometheus.log_by_lua_code_lines }}
    {{- range $log_line := .nginx.prometheus.log_by_lua_code_lines -}}
  {{ $log_line }}
    {{- end -}}
  {{- end }}
  metric_latency:observe(request_time, {host})
  -- if upstream_response_time ~= nil then metric_upstream_latency:observe(upstream_response_time, {host}) end
  metric_response_sizes:observe(tonumber(ngx.var.bytes_sent),{host})
';
{{- end -}}
